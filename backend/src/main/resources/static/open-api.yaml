---
openapi: 3.0.1
info:
  title: Sayyara Backend
  version: v0
  description: "# How to Authenticate
  \n\nThis API uses Bearer/Token authentication to authenticate a user that is logged in. Once successfully logged in using the `/api/user/login` endpoint, you will receive a JWT `access_token` and `refresh_token`. Both tokens are encrypted and contain information about the user like their username, and can be decrypted by the backend to retrieve that information.

  \n\nWhen accessing an endpoint that requires a user's info, you can just pass in the JWT access token using the header `Authorization: \"Bearer <token>\"`. The API will decrypt the `access_token` and retrieve the username and use that to get data for the specific user. This way, you don't need to pass in any information about the user through a parameter or request body.

  \n\n For security reasons, the `access_token` will expire every few minutes, and will need to be refreshed. To refresh the token, pass in the `refresh_token` to the endpoint `/api/token/refresh` (see below), which will give you a new `access_token`.\n\n
  **Note:** The lock icon on the right side of each endpoint indicates that this endpoint can only be accessed by an authorized Shop Owner, meaning that an access token must be passed from the `Authorization` header. Likewise, an endpoint without the lock can be accessed by a user that isn't logged in."
paths:

  ############## AUTHENTICATION ##############
  /api/user/login:
    post:
      operationId: login
      summary: Attempt to login a user
      description: Attempt to login the user with the given login info.
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInfo"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        '401':
          description: Invalid login info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"



  ############## TOKENS ##############
  /api/token/refresh:
    get:
      tags:
        - Tokens
      operationId: getRefreshToken
      summary: Refresh the existing access token with a new one
      description: Attempt to refresh the `access_token` given a `refresh_token`
      responses:
        '200':
          description: Retrieved new access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        '401':
          description: Invalid/Missing Authorization header
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"



  ############## SHOP OWNER ##############
  /api/shopOwner:
    get:
      tags:
        - Shop Owner
      operationId: getShopOwner
      summary: Get Shop Owner
      description: Get the Shop Owners object of the user that is currently logged in.
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successfully retrieved the shop owner
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/ShopOwner"
        '401':
          $ref: "#/components/responses/Unauthorized"
    put:
      tags:
        - Shop Owner
      operationId: updateShopOwner
      summary: Update Shop Owner info
      description: Update a shop owner's user info and retrieve the updated info back. Not all fields are required, but all can be passed in even if they don't update the value.
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AppUserDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/AppUserDTO"
        '401':
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - Shop Owner
      operationId: signUp
      security:
        - bearerAuth: [ ]
      summary: Sign up
      description: Create a new Shop Owner in the database
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ShopOwner"
        required: true
      responses:
        '201':
          description: Successfully created new Shop Owner
        '401':
          $ref: "#/components/responses/Unauthorized"
  "/api/shopOwner/password":
    put:
      tags:
        - Shop Owner
      summary: Update password
      description: Validate that the given `oldPassword` matches the logged in user's password and if so, update the password of the user
      operationId: updateShopOwnerPassword
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Passwords"
        required: true
      responses:
        '200':
          description: Successfully updated password
        '400':
          $ref: "#/components/responses/InvalidPassword"
        '401':
          $ref: "#/components/responses/Unauthorized"





  ############## SHOP ##############
  /api/shops:
    get:
      tags:
        - Shop
      summary: Get all Shops
      description: Get the list of all shops
      operationId: getAllShops
      responses:
        '200':
          description: Successfully retrieved all Shops
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Shop"
  /api/shop:
    put:
      tags:
        - Shop
      summary: Update Shop
      description: Update an existing shop of the current logged in shop owner
      operationId: updateShop
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Shop"
        required: true
      responses:
        '200':
          description: Successfully updated Shop
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Shop"
        '400':
          $ref: "#/components/responses/InvalidData"
        '401':
          $ref: "#/components/responses/Unauthorized"
  /api/shop/{shopId}:
    get:
      tags:
        - Shop
      summary: Get Shop by ID
      description: Get a shop by its ID
      operationId: getShopById
      parameters:
        - name: shopId
          in: path
          description: ID of the shop to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved Shop
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Shop"
        '404':
          $ref: "#/components/responses/NotFound"



  ############## SERVICES ##############
  "/api/services":
    get:
      tags:
        - Services
      summary: Get a Service by ID
      description: Get a service by its ID
      operationId: getService
      parameters:
          - name: service_id
            in: path
            description: ID of the service to retrieve
            required: true
            schema:
                type: integer
                format: int64
      responses:
        '200':
          description: Successfully retrieved Service with given ID
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Service"
        '404':
          description: Service with given ID not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DataNotFoundError"
    post:
      tags:
        - Services
      summary: Create Service
      description: Create a new service for the shop of the currently logged in shop owner
      operationId: createService
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestService"
        required: true
      responses:
        '201':
          description: Successfully created Service
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/ResponseService"
    delete:
        tags:
            - Services
        summary: Delete Service
        description: Delete a service by its ID
        operationId: deleteService
        parameters:
            - name: service_id
              in: path
              description: ID of the service to delete
              required: true
              schema:
                  type: integer
                  format: int64
        responses:
            '200':
              description: Successfully deleted Service with given ID
              content:
                  "application/json":
                    schema:
                        "$ref": "#/components/schemas/Service"
            '404':
              description: Service with given ID not found
              content:
                  "application/json":
                    schema:
                        $ref: "#/components/schemas/DataNotFoundError"



  ############## Appointments ##############
  "/api/appointments":
    get:
      tags:
        - Appointment
      operationId: getAllAppointments
      security:
        - bearerAuth: [ ]
      summary: Get all Appointments
      description: Get the list of all appointments associated to the Shop Owner that is currently logged in
      responses:
        '200':
          description: Successfully retrieved all Appointments
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ResponseAppointment"
        '401':
          $ref: "#/components/responses/Unauthorized"

  /api/appointments/{appointmentId}:
    get:
      tags:
        - Appointment
      operationId: getAppointment
      summary: Get Appointment
      description: Get details of a specific appointment determined by its `appointmentId`
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved Appointment
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/ResponseAppointment"
        '404':
          description: Appointment associated with the id not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DataNotFoundError"


  /api/vehicleOwner/{vehicleOwnerId}/appointments:
    get:
      tags:
        - Appointment
      operationId: getVehicleOwnerAppointments
      summary: Get Vehicle Owner Appointments
      description: Get the list of all appointments associated to the Vehicle Owner determined by its `vehicleOwnerId`
      parameters:
        - name: vehicleOwnerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved all Appointments
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ResponseAppointment"
        '404':
          description: Vehicle Owner associated with the id not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DataNotFoundError"
    post:
      tags:
        - Appointment
      operationId: createAppointment
      summary: Create Appointment
      description: "Create a new Appointment for the Vehicle Owner either by passing in the Appointment object or 
      passing in a quoteId to create an appointment from a quote.\n\n
      If a quoteId is passed in, the Appointment's wasQuote field will be set to true and 
      the Quote will be set to Accepted."
      parameters:
        - name: vehicleOwnerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: quoteId
          in: query
          required: false
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestAppointment"
        required: true
      responses:
        '201':
          description: Successfully created new Appointment
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/ResponseAppointment"
        '400':
          $ref: "#/components/responses/InvalidData"
        403:
          description: The user is not authorized to create an appointment for this vehicle owner
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        '404':
          description: "Vehicle Owner or Quote were not found by their id, or Shop was not found within the Quote, or 
          Quote was not associated with the Vehicle Owner"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DataNotFoundError"




  ############## QUOTES ##############
  "/api/quotes":
    get:
      tags:
        - Quotes
      operationId: getAllQuotes
      security:
        - bearerAuth: [ ]
      summary: Get all Quotes
      description: Get the list of all quotes associated to the Shop Owner that is currently logged in
      responses:
        '200':
          description: Successfully retrieved all Quotes
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ResponseQuote"
        '401':
          $ref: "#/components/responses/Unauthorized"

  /api/quotes/{quoteId}:
    get:
      tags:
        - Quotes
      operationId: getQuote
      summary: Get Quote
      description: Get details of a specific Quote determined by its `quoteId`
      parameters:
        - name: quoteId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved Quote
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/ResponseQuote"
        '404':
          description: Quote associated with the id not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DataNotFoundError"
    patch:
      tags:
        - Quotes
      operationId: updateQuote
      summary: Update either the status or the price of a Quote
      description: "Update the quote determined by its `quoteId` with either a new status, or a price.\n\n
      **Note:** Only the status or the price can be updated at a time. If both are provided, there will be an error.\n\n
      Once the price is updated, the status of this quote will automatically be set to `Pending Approval`.\n\n
      Viable statuses are {`Pending Approval`, `Pending Review`, `Accepted`, `Rejected`, `Expired`} case insensitive."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  required: false
                  type: number
                  format: double
                  example: 49.99
                status:
                  $ref: "#/components/schemas/QuoteStatus"
              required: false
        required: true
      responses:
        '200':
          description: Successfully updated Quote status
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/ResponseQuote"
        204:
          description: No content was provided. Nothing was updated
        '400':
          description: Invalid data passed. Remember to either pass in a price or a status, but not both at the same time.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/InvalidDataError"
        '404':
          description: Quote associated with the id not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DataNotFoundError"




  /api/vehicleOwner/{vehicleOwnerId}/quotes:
    get:
      tags:
        - Quotes
      operationId: getAllQuotesForVehicleOwner
      summary: Get all Quotes for a Vehicle Owner
      description: Get the list of all quotes associated to a Vehicle Owner determined by it's id
      parameters:
        - name: vehicleOwnerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved all Quotes
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ResponseQuote"
        '404':
          description: Vehicle Owner associated with the id not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DataNotFoundError"
  /api/vehicleOwner/quotes:
    post:
      tags:
        - Quotes
      operationId: createQuote
      summary: Create Quote
      description: "Create a new Quote for a Vehicle Owner or add it to an existing Vehicle Owner, determined by it's email."
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestQuote"
        required: true
      responses:
        '201':
          description: Successfully created new Quote
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/ResponseQuote"
        '400':
          $ref: "#/components/responses/InvalidData"
        '404':
          description: Shop owner associated with the id not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DataNotFoundError"

############## SCHEMAS ##############
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorized:
      description: Invalid/Missing Authorization header
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidPassword:
      description: Incorrect old password. Response will give a `message` that can be displayed to the user.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvalidPasswordError"
    InvalidData:
      description: Invalid data passed. Cannot update. This will return a `message` that will benefit the user of the application.
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/InvalidDataError"
  # parameters:
  #   authHeader:
  #     in: header
  #     name: Authorization
  #     schema:
  #       type: string
  #     required: true
  #     description: In the form "Bearer <access_token>"
  schemas:
    Error:
      type: object
      properties:
        timestamp:
          type: string
          example: '2022-11-12T21:35:03.905+00:00'
        status:
          type: number
          example: 401
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: Unauthorized
        path:
          type: string
          example: /api/user/login
    InvalidDataError:
      type: object
      properties:
        timestamp:
          type: string
          example: '2022-11-12T21:35:03.905+00:00'
        status:
          type: number
          example: 400
        error:
          type: string
          example: Bad Request
        message:
          type: string
          example: email jack@gmail.com already exists.
        path:
          type: string
          example: /api/shopOwner
    InvalidPasswordError:
      type: object
      properties:
        timestamp:
          type: string
          example: '2022-11-12T21:35:03.905+00:00'
        status:
          type: number
          example: 400
        error:
          type: string
          example: Bad Request
        message:
          type: string
          example: Old password is incorrect
        path:
          type: string
          example: /api/shopOwner/password
    DataNotFoundError:
      type: object
      properties:
        timestamp:
          type: string
          example: '2022-11-12T21:35:03.905+00:00'
        status:
          type: number
          example: 404
        error:
          type: string
          example: Not Found
        message:
          type: string
          example: data with id 4 not found.
        path:
          type: string
          example: /api/quotes/4
    LoginInfo:
      type: object
      properties:
        username:
          type: string
          example: bob123
        password:
          type: string
          example: Password1!
    Tokens:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
    Vehicle:
      type: object
      properties:
        year:
          type: integer
          format: int32
        make:
          type: string
        model:
          type: string
        vin:
          type: string
        plate:
          type: string
        registeredOwner:
          type: string
    VehicleOwner:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        vehicle:
          "$ref": "#/components/schemas/Vehicle"
    Address:
      type: object
      properties:
        id:
          type: integer
          format: int64
        streetNumber:
          type: string
        street:
          type: string
        city:
          type: string
        province:
          type: string
        postalCode:
          type: string
    RequestAppointment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        shopId:
          type: integer
          format: int64
        vehicleOwner:
          "$ref": "#/components/schemas/VehicleOwner"
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        price:
          type: number
          format: double
        wasQuote:
          type: boolean
          default: false
        serviceName:
          type: string
    ResponseAppointment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        shopInfo:
          "$ref": "#/components/schemas/ShopInfo"
        vehicleOwner:
          "$ref": "#/components/schemas/VehicleOwner"
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        price:
          type: number
          format: double
        wasQuote:
          type: boolean
          default: false
        serviceName:
          type: string
    RequestQuote:
      type: object
      properties:
        id:
          type: integer
        shopId:
          type: integer
          format: int64
        vehicleOwner:
          "$ref": "#/components/schemas/VehicleOwner"
        serviceName:
          type: string
        price:
          type: number
          format: double
          nullable: true
        expiryDate:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/QuoteStatus"
        description:
          type: string
    ResponseQuote:
      type: object
      properties:
        id:
          type: integer
        shopInfo:
          "$ref": "#/components/schemas/ShopInfo"
        vehicleOwner:
          "$ref": "#/components/schemas/VehicleOwner"
        serviceName:
          type: string
        price:
          type: number
          format: double
          nullable: true
        expiryDate:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/QuoteStatus"
        description:
          type: string
    QuoteStatus:
      type: string
      enum:
        - Pending Approval
        - Pending Review
        - Accepted
        - Rejected
        - Expired
    Service:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        defaultPrice:
          type: number
          format: double
    Shop:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        address:
          "$ref": "#/components/schemas/Address"
        appointments:
          type: array
          items:
            "$ref": "#/components/schemas/ResponseAppointment"
        quotes:
          type: array
          items:
            "$ref": "#/components/schemas/Quote"
        phoneNumber:
          type: string
        email:
          type: string
        services:
          type: array
          items:
            "$ref": "#/components/schemas/Service"
    ShopInfo:
      type: object
      properties:
        shopId:
          type: number
        name:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        address:
          "$ref": "#/components/schemas/Address"
    AppUserDTO:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        username:
          type: string
    Passwords:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    ShopOwner:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        username:
          type: string
        password:
          type: string
          writeOnly: true
        shop:
          "$ref": "#/components/schemas/Shop"
